rex
Type: Search command
Category: Search Processing Language (SPL) — Field extraction and manipulation

Definition:
The rex command in Splunk is used to extract fields from event data at search time using regular expressions (regex). With rex, you can dynamically identify patterns in raw data or existing fields and capture parts of those patterns into new fields that can be used in the rest of the search.

rex is powerful when you want to:

Parse unstructured data (e.g. logs that do not already have well-defined fields).

Extract specific pieces of information without modifying the original data.

Create fields on the fly for analysis, reporting, or filtering.

Syntax:

... | rex [field=<field_name>] "<regular_expression>"
or
... | rex mode=sed "s/<pattern>/<replacement>/"

field=<field_name> (optional): Specifies which field to apply the regex to. If you do not specify a field, rex applies to the _raw event text by default.

<regular_expression>: The regex pattern, enclosed in double quotes. You can use named groups (?<fieldname>) in the pattern to create new fields.

mode=sed: Optional mode where you can perform search-and-replace operations using SED-style expressions.

Key concepts:

_raw field: The entire raw text of the event. If no field is specified, rex applies to _raw.

Named capture group: A way to create a new field using regex syntax. For example, (?<fieldname>pattern) creates a field called fieldname with the matched value.

mode=sed: A mode in rex that lets you replace parts of field values using substitution syntax, similar to the Unix sed command.

How it works:
When you run rex:

Splunk applies your regex pattern to each event (or to the specified field).

If your regex includes named groups, Splunk creates new fields in the search results.

These new fields exist only for that search — they are not saved to the index.

You can use the extracted fields in later parts of your SPL (e.g. for stats, table, eval).

Common use cases:

Extract IP addresses, user names, or URLs from unstructured logs.

Parse key-value pairs when data is not in a clean format.

Clean up or reformat data using mode=sed.

Examples:

Extract username from a raw event
Suppose your log contains:
user=alice action=login status=success
You can extract the username:


index=main
| rex "user=(?<username>\w+)"
| table username
This creates a field called username containing alice.

Extract HTTP status codes from web logs


index=web sourcetype=access_combined
| rex "HTTP/\d\.\d\" (?<http_status>\d{3})"
| stats count by http_status
This captures the 3-digit HTTP status code (like 200, 404) in a field http_status and counts occurrences.

Extract domain from an email field


index=mail
| rex field=from_email "@(?<domain>[^>]+)"
| table from_email domain
This extracts the domain part after @ in the from_email field.

Use SED mode to mask sensitive data
Suppose logs have credit card numbers and you want to mask them:


index=payments
| rex mode=sed "s/\d{12}(\d{4})/************\1/g"
This replaces the first 12 digits with * and keeps the last 4 visible.

Extract IP address


index=firewall
| rex "(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
| table src_ip
Extracts IPv4 addresses into the src_ip field.

Tips for effective use:

Always test your regex separately to ensure it matches as expected.

Use non-greedy qualifiers (e.g., .*?) when matching variable-length text to avoid unintended matches.

Limit regex to the smallest necessary part of your data to improve performance.

You can use regex101.com or similar tools to build and test your regex before using in Splunk.

Limitations:

rex is a search-time command; extracted fields are not permanent.

Complex regex patterns can slow down searches on large datasets.

Overuse of rex in large searches may impact search performance.

Related commands:

regex — filters events based on a regex match (does not create fields).

spath — extracts fields from structured data like JSON or XML.

fields — selects or removes fields from search results.

