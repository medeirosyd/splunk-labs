fields
Type: Search command
Category: SPL (Search Processing Language) — Field selection

Definition:
The fields command in Splunk is used to control which fields are visible and passed forward in your search results. It allows you to either include specific fields (show only those fields) or exclude specific fields (hide those fields and keep the rest). This command helps reduce the amount of data processed by subsequent commands, making searches faster and cleaner. It does not change the event data stored in indexes or modify any actual data — it only affects what is displayed and used in the current search.

Purpose:
The main purpose of the fields command is to simplify and optimize search results by limiting the number of fields. This is useful when:

You want to focus only on relevant fields for analysis or reporting.

You want to improve search performance by reducing unnecessary data.

You are preparing data for export or for use in dashboards, reports, or alerts.

Syntax:
fields <field1> <field2> ...
fields - <field1> <field2> ...

Where:

fields <field1> <field2> means include only these fields and discard the rest.

fields - <field1> <field2> means exclude these fields and keep all other fields.

You can list one or more field names after the command, separated by spaces.

How it works:
When you run the fields command:

Splunk looks at the events that matched your search up to that point.

It keeps or removes fields based on what you specify.

The resulting data is passed to the next command in your pipeline with only the specified fields visible.

This does not change indexed data. The command operates only at search time.

Key concepts:

By default, Splunk shows some common fields automatically, including _time, host, source, and sourcetype.

The fields command is for controlling what is visible or passed forward, not for creating or modifying field values.

Inclusion (listing field names directly) is generally more efficient than exclusion (using the minus sign).

The fields you keep or remove affect what later commands like stats, table, chart, or timechart can use.

Examples:

Example 1 — Keep only host, source, and sourcetype
index=main
| fields host source sourcetype

Example 2 — Exclude the field source
index=main
| fields - source

Example 3 — Extract a field and keep only the new field along with _time
index=web
| rex "user=(?<username>\w+)"
| fields _time username

Example 4 — Keep only fields needed for reporting
index=firewall
| fields src_ip dest_ip action
| stats count by src_ip dest_ip action

Example 5 — Exclude large verbose fields
index=main
| fields - _raw

Default fields shown in search results (unless removed or changed):

_time

host

source

sourcetype

Best practices:

Use fields early in your search pipeline to reduce the data volume processed by later commands.

When possible, prefer inclusion (fields <field1> <field2>) because it is more explicit and efficient.

Use fields to make search results cleaner for dashboards, reports, or exports.

Combine fields with table if you want to control both visibility and order of fields in a tabular display.

Performance tip:
Reducing the number of fields passed along can significantly improve search performance, especially on large datasets.

Comparison with similar commands:

fields: Controls which fields are kept or removed, no change to field values.

table: Similar to fields, but also controls field order and outputs data in table format.

rex: Extracts fields using regular expressions.

eval: Creates or modifies field values.

rename: Renames fields but does not control visibility.

Limitations:

The fields command does not modify event data. It only affects what fields are visible or passed along.

You cannot use fields to create new fields or change the contents of fields.

It does not affect how data is stored in indexes.

Example combined usage:
index=web sourcetype=access_combined
| rex "user=(?<username>\w+)"
| fields username status uri_path
| stats count by username, status

In this example, we first extract the username, then limit the fields to username, status, and uri_path, and finally count events grouped by username and status.
